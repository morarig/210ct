#include <iostream>
#include <math.h>
using namespace std;
int n, v[100], sol;
bool found_solution = 0;
void display()
{
	sol++; cout << "\n Solution: " << sol << '\n';
	for (int index1 = 1;index1 <= n;index1++)
	{
		for (int index2 = 1;index2 <= n;index2++)
			if (v[index1] == index2) cout << "Q ";
			else cout << "_ ";
			cout << '\n';
	}
}
int validity(int k)
{
	for (int index = 1;index <= k - 1;index++)
		if ((v[index] == v[k]) || (abs(v[k] - v[index]) == (k - index)))
			return 0;
	return 1;
}
int solution(int k)
{
	if (k == n)
		return 1;
	return 0;
}
void find_positions(int k)//k is the current position , should be 1 at first function call
{
	for (int index = 1;index <= n;index++)
	{
		v[k] = index;
		if (validity(k) == 1)
		{
			if (solution(k) == 1)
			{
				display();
				found_solution = 1;
				//break; //if you only want the first solution , leave the comment if you want them all
			}
			else
				find_positions(k + 1);
		}
	}
}
void main()
{
	cout << "Enter number of columns(lines) , 8 for a normal chess board : ";
	cin >> n;
	find_positions(1);
	if (!found_solution)
		cout << "No solution found\n";
}
